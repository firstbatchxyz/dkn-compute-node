use crate::{
    config::constants::{WAKU_APP_NAME, WAKU_ENCODING, WAKU_ENC_VERSION},
    utils::{crypto::sha256hash, get_current_time_nanos},
};

use base64::{prelude::BASE64_STANDARD, Engine};
use ecies::PublicKey;
use serde::{de::Error, Deserialize, Serialize};

/// A Waku message, as defined by [14/WAKU2-MESSAGE](https://github.com/vacp2p/rfc-index/blob/main/waku/standards/core/14/message.md).
///
/// ## Fields
///
/// - `payload`: The message payload as a base64 encoded data string.
/// - `content_topic`: The message content topic for optional content-based filtering.
/// - `version`: Message version. Used to indicate type of payload encryption. Default version is 0 (no payload encryption).
/// - `timestamp`: The time at which the message is generated by its sender. This field holds the Unix epoch time in nanoseconds as a 64-bits integer value.
/// - `ephemeral`: This flag indicates the transient nature of the message. Indicates if the message is eligible to be stored by the STORE protocol.
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "camelCase")]
pub struct WakuMessage {
    pub payload: String,
    pub content_topic: String,
    #[serde(default)]
    pub version: u8,
    #[serde(default)]
    pub timestamp: u128,
    #[serde(default)]
    #[serde(skip_serializing)] // see: https://github.com/waku-org/nwaku/issues/2643
    pub ephemeral: bool,
}

impl WakuMessage {
    /// Creates a new Waku message.
    ///
    /// ## Parameters
    /// - `payload` is gives as bytes. It is base64 encoded internally.
    /// - `topic` is the name of the topic itself within the full content topic. The rest of the content topic
    /// is filled in automatically, e.g. `/dria/0/<topic>/proto`.
    pub fn new(payload: impl AsRef<[u8]>, topic: &str) -> Self {
        WakuMessage {
            payload: BASE64_STANDARD.encode(payload),
            content_topic: Self::create_content_topic(topic).to_string(),
            version: WAKU_ENC_VERSION,
            timestamp: get_current_time_nanos(),
            ephemeral: false,
        }
    }

    /// Decodes the base64 payload into bytes.
    pub fn decode_payload(&self) -> Result<Vec<u8>, base64::DecodeError> {
        BASE64_STANDARD.decode(&self.payload)
    }

    /// Decodes and parses the payload into JSON.
    pub fn parse_payload<T: for<'a> Deserialize<'a>>(
        &self,
        signed: bool,
    ) -> Result<T, serde_json::Error> {
        let payload = self
            .decode_payload()
            .map_err(|err| serde_json::Error::custom(format!("Base64 decode failed: {}", err)))?;

        let body = if signed {
            // skips the 65 byte hex signature
            &payload[130..]
        } else {
            &payload[..]
        };

        serde_json::from_slice(body)
    }

    pub fn is_signed(&self, public_key: &PublicKey) -> Result<bool, serde_json::Error> {
        // decode base64 payload
        let payload = self
            .decode_payload()
            .map_err(|err| serde_json::Error::custom(format!("Base64 decode failed: {}", err)))?;

        // parse signature (64 bytes = 128 hex chars, although the full 65-byte RSV signature is given)
        let (signature, body) = (&payload[..128], &payload[130..]);
        let signature = hex::decode(signature).expect("could not decode");
        let signature =
            libsecp256k1::Signature::parse_standard_slice(&signature).expect("could not parse");

        // verify signature
        let digest = libsecp256k1::Message::parse(&sha256hash(body));
        Ok(libsecp256k1::verify(&digest, &signature, public_key))
    }

    /// A [Content Topic](https://docs.waku.org/learn/concepts/content-topics) is represented as a string with the form:
    ///
    /// ```sh
    /// /app-name/version/content-topic/encoding
    /// /waku/2/default-waku/proto # example
    /// ```
    ///
    /// `app-name` defaults to `dria` unless specified otherwise with the second argument.
    #[inline]
    pub fn create_content_topic(topic: &str) -> String {
        format!(
            "/{}/{}/{}/{}",
            WAKU_APP_NAME, WAKU_ENC_VERSION, topic, WAKU_ENCODING
        )
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use libsecp256k1::{Message, SecretKey};
    use rand::thread_rng;
    use serde_json::json;

    #[derive(Serialize, Deserialize, PartialEq, Debug)]
    struct TestStruct {
        hello: String,
    }

    impl Default for TestStruct {
        fn default() -> Self {
            TestStruct {
                hello: "world".to_string(),
            }
        }
    }

    const TOPIC: &str = "test-topic";

    #[test]
    fn test_create_content_topic() {
        let expected = "/dria/0/test-topic/proto".to_string();
        assert_eq!(WakuMessage::create_content_topic(TOPIC), expected);
    }

    #[test]
    fn test_unsigned_message() {
        // create payload & message
        let body = TestStruct::default();
        let payload = serde_json::to_vec(&json!(body)).unwrap();
        let message = WakuMessage::new(payload, TOPIC);

        // decode message
        let message_body = message.decode_payload().unwrap();
        let body = serde_json::from_slice::<TestStruct>(&message_body).unwrap();
        assert_eq!(
            serde_json::to_string(&body).unwrap(),
            "{\"hello\":\"world\"}"
        );
        assert_eq!(message.content_topic, "/dria/0/test-topic/proto");
        assert_eq!(message.version, WAKU_ENC_VERSION);
        assert_eq!(message.ephemeral, false);
        assert!(message.timestamp > 0);

        let parsed_body = message.parse_payload(false).expect("Should decode.");
        assert_eq!(body, parsed_body);
    }

    #[test]
    fn test_signed_message() {
        let mut rng = thread_rng();
        let sk = SecretKey::random(&mut rng);

        // create payload & message with signature & body
        let body = TestStruct::default();
        let body_str = serde_json::to_string(&json!(body)).unwrap();
        let (signature, recid) = libsecp256k1::sign(&Message::parse(&sha256hash(&body_str)), &sk);
        let signature_str = format!(
            "{}{}",
            hex::encode(signature.serialize()),
            hex::encode([recid.serialize()])
        );
        let payload = format!("{}{}", signature_str, body_str);
        let message = WakuMessage::new(payload, TOPIC);

        // decode message
        let message_body = message.decode_payload().unwrap();
        let body = serde_json::from_slice::<TestStruct>(&message_body[130..]).unwrap();
        assert_eq!(
            serde_json::to_string(&body).unwrap(),
            "{\"hello\":\"world\"}"
        );
        assert_eq!(message.content_topic, "/dria/0/test-topic/proto");
        assert_eq!(message.version, WAKU_ENC_VERSION);
        assert_eq!(message.ephemeral, false);
        assert!(message.timestamp > 0);

        // check signature
        let pk = PublicKey::from_secret_key(&sk);
        assert!(message.is_signed(&pk).unwrap());

        let parsed_body = message.parse_payload(true).expect("Should decode.");
        assert_eq!(body, parsed_body);
    }
}
